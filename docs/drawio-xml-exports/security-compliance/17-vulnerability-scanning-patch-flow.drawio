<?xml version="1.0" encoding="UTF-8"?>
<mxfile host="app.diagrams.net" modified="17-vulnerability-scanning-patch-flow" agent="PlantUML Converter" version="1.0" etag="plantuml-diagram" type="device">
  <diagram id="plantuml-17-vulnerability-scanning-patch-flow" name="17-vulnerability-scanning-patch-flow">
    <mxGraphModel dx="1422" dy="794" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="plantuml-container" value="" style="shape=image;html=1;verticalAlign=top;verticalLabelPosition=bottom;labelBackgroundColor=#ffffff;imageAspect=0;aspect=fixed;image=data:image/svg+xml,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI0MDAiIGhlaWdodD0iMzAwIiB2aWV3Qm94PSIwIDAgNDAwIDMwMCI+CiAgPHJlY3Qgd2lkdGg9IjQwMCIgaGVpZ2h0PSIzMDAiIGZpbGw9IiNmOGY5ZmEiIHN0cm9rZT0iI2RlZTJlNiIvPgogIDx0ZXh0IHg9IjIwMCIgeT0iMTUwIiB0ZXh0LWFuY2hvcj0ibWlkZGxlIiBmb250LWZhbWlseT0iQXJpYWwiIGZvbnQtc2l6ZT0iMTQiIGZpbGw9IiM2Yzc1N2QiPgogICAgRGlhZ3JhbWEgUGxhbnRVTUw6IDE3LXZ1bG5lcmFiaWxpdHktc2Nhbm5pbmctcGF0Y2gtZmxvdwogIDwvdGV4dD4KICA8dGV4dCB4PSIyMDAiIHk9IjE3MCIgdGV4dC1hbmNob3I9Im1pZGRsZSIgZm9udC1mYW1pbHk9IkFyaWFsIiBmb250LXNpemU9IjEyIiBmaWxsPSIjNmM3NTdkIj4KICAgIChTVkcgbsOjbyBkaXNwb27DrXZlbCAtIHVzZSBvIGPDs2RpZ28gUGxhbnRVTUwgaW5jb3Jwb3JhZG8pCiAgPC90ZXh0Pgo8L3N2Zz4=;plantuml=;" vertex="1" parent="1">
          <mxGeometry x="40" y="40" width="400" height="300" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>