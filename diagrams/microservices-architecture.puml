@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

' Configuration for better rendering
!define DIRECTION top to bottom direction
SKINPARAM linetype ortho

' Title definition
TITLE Microservices Architecture - Container Diagram

' User definition
Person(user, "User", "Client who accesses the web application")

' Main system boundary
System_Boundary(main_system, "Microservices System") {
    ' Frontend Layer
    Container(frontend, "Frontend", "React, JavaScript", "User interface")
    
    ' Backend Layer
    Container(bff, "BFF", "Node.js, Express", "Backend For Frontend")
    Container(api_gateway, "API Gateway", "Kong/Zuul", "Routing and authentication")
    Container(load_balancer, "Load Balancer", "NGINX", "Load distribution")
    
    ' Microservices Layer
    System_Boundary(microservices, "Microservices") {
        Container(user_service, "User Service", "Spring Boot", "User management")
        Container(product_service, "Product Service", "Spring Boot", "Product catalog")
        Container(order_service, "Order Service", "Spring Boot", "Order processing")
        Container(payment_service, "Payment Service", "Spring Boot", "Payments")
        Container(notification_service, "Notification Service", "Spring Boot", "Notifications")
    }
    
    ' Data Layer
    System_Boundary(data_layer, "Data Layer") {
        ContainerDb(databases, "Databases", "PostgreSQL", "Master/Slave replicated")
        Container(cache_cluster, "Cache Cluster", "Redis", "Distributed cache")
    }
}

' Main relationships - Request flow
Rel(user, frontend, "Accesses application", "HTTPS")
Rel(frontend, bff, "API requests", "JSON/HTTPS")
Rel(bff, load_balancer, "Aggregated calls", "JSON/HTTP")
Rel(load_balancer, api_gateway, "Routes & Auth", "HTTP")

' Load Balancer to Microservices
Rel(api_gateway, microservices, "Routing", "HTTP")

' Microservices to Data Layer
Rel(microservices, databases, "Persistence", "SQL")
Rel(microservices, cache_cluster, "Cache", "Redis Protocol")

' Communication between microservices (main)
Rel(order_service, user_service, "Validates user", "HTTP")
Rel(order_service, product_service, "Queries products", "HTTP")
Rel(order_service, payment_service, "Processes payment", "HTTP")
Rel(payment_service, notification_service, "Notifies payment", "HTTP")

@enduml