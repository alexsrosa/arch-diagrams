@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_LEFT_RIGHT()
TITLE Microservices with API Gateway on Kubernetes

Person(user, "User", "Uses a web browser")

System_Boundary(k8s_cluster, "Kubernetes Cluster") {
  System_Boundary(gateway_ns, "Gateway Namespace") {
    Container(ingress, "Ingress Controller", "Nginx Ingress", "External traffic entry point")
    Container(api_gateway, "API Gateway", "Kong/Zuul\nKubernetes Pod", "Routes and manages API requests")
  }
  
  System_Boundary(frontend_ns, "Frontend Namespace") {
    Container(frontend_svc, "Frontend Service", "ClusterIP", "Exposes frontend")
    Container(frontend_pod, "Frontend Pod", "React, Nginx\nKubernetes Pod", "User interface")
  }
  
  System_Boundary(services_ns, "Services Namespace") {
    Container(user_svc, "User Service", "ClusterIP", "User management API")
    Container(user_pod, "User Pod", "Java, Spring Boot\nKubernetes Pod", "Handles user operations")
    
    Container(product_svc, "Product Service", "ClusterIP", "Product catalog API")
    Container(product_pod, "Product Pod", "Java, Spring Boot\nKubernetes Pod", "Manages product data")
    
    Container(order_svc, "Order Service", "ClusterIP", "Order processing API")
    Container(order_pod, "Order Pod", "Java, Spring Boot\nKubernetes Pod", "Processes orders")
  }
  
  System_Boundary(data_ns, "Data Namespace") {
    ContainerDb(db_pod, "Database Pod", "PostgreSQL\nKubernetes Pod", "Shared database")
    Container(pvc, "Persistent Volume", "Kubernetes PVC", "Persistent storage")
  }
}

Rel(user, ingress, "Accesses via", "HTTP/HTTPS")
Rel(ingress, frontend_svc, "Routes UI requests", "HTTP")
Rel(ingress, api_gateway, "Routes API requests", "HTTP")
Rel(frontend_svc, frontend_pod, "Serves UI", "HTTP")
Rel(frontend_pod, api_gateway, "API calls", "HTTP/REST")
Rel(api_gateway, user_svc, "User requests", "HTTP")
Rel(api_gateway, product_svc, "Product requests", "HTTP")
Rel(api_gateway, order_svc, "Order requests", "HTTP")
Rel(user_svc, user_pod, "Routes requests", "HTTP")
Rel(product_svc, product_pod, "Routes requests", "HTTP")
Rel(order_svc, order_pod, "Routes requests", "HTTP")
Rel(user_pod, db_pod, "User data", "JDBC/SQL")
Rel(product_pod, db_pod, "Product data", "JDBC/SQL")
Rel(order_pod, db_pod, "Order data", "JDBC/SQL")
Rel(db_pod, pvc, "Persists data", "File System")
@enduml